[
    {
        "title": "Flutter Roadmap",
        "description": "Flutter widgets are built using a modern framework that takes inspiration from React. The central idea is that you build your UI out of widgets. Widgets describe what their view should look like given their current configuration and state. When a widget’s state changes, the widget rebuilds its description, which the framework diffs against the previous description in order to determine the minimal changes needed in the underlying render tree to transition from one state to the next.",
        "image": ""
    },
    {
        "title": "main function",
        "description": "The runApp() function takes the given Widget and makes it the root of the widget tree. In this example, the widget tree consists of two widgets, the Center widget and its child, the Text widget. The framework forces the root widget to cover the screen, which means the text “Hello, world” ends up centered on screen. The text direction needs to be specified in this instance; when the MaterialApp widget is used, this is taken care of for you, as demonstrated later.",
        "image": "https://www.softwebsolutions.com/wp-content/webp-express/webp-images/uploads/2020/10/flutter-app-developer.jpg.webp"
    },
    {
        "title": "Scaffold",
        "description": "When writing an app, you’ll commonly author new widgets that are subclasses of either StatelessWidget or StatefulWidget, depending on whether your widget manages any state. A widget’s main job is to implement a build() function, which describes the widget in terms of other, lower-level widgets. The framework builds those widgets in turn until the process bottoms out in widgets that represent the underlying RenderObject, which computes and describes the geometry of the widget.",
        "image": "https://www.softwebsolutions.com/wp-content/webp-express/webp-images/uploads/2020/10/flutter-app-developer.jpg.webp"
    },
    {
        "title": "Stateful widget",
        "description": "These flex widgets let you create flexible layouts in both the horizontal (Row) and vertical (Column) directions. The design of these objects is based on the web’s flexbox layout model.",
        "image": "https://www.softwebsolutions.com/wp-content/webp-express/webp-images/uploads/2020/10/flutter-app-developer.jpg.webp"
    },
    {
        "title": "Container",
        "description": "The Container widget lets you create a rectangular visual element. A container can be decorated with a BoxDecoration, such as a background, a border, or a shadow. A Container can also have margins, padding, and constraints applied to its size. In addition, a Container can be transformed in three dimensional space using a matrix.",
        "image": "https://www.softwebsolutions.com/wp-content/webp-express/webp-images/uploads/2020/10/flutter-app-developer.jpg.webp"
    }
]
